/////
// File automatically generated by protoc-gen-twirp_dart
// DO NOT EDIT
/////
import 'dart:async';
import 'package:http/http.dart';
import 'package:requester/requester.dart';
import 'package:twirp_dart_core/twirp_dart_core.dart';
import 'dart:convert';
import './service.pb.dart' as pb;

class Size {
  Size(
    this.inches,
  );

  int inches;

  pb.Size toProto() {
    var pbSize = pb.Size();
    pbSize.inches = inches;

    return pbSize;
  }

  factory Size.fromProto(pb.Size pbSize) {
    return new Size(
      pbSize.inches,
    );
  }

  factory Size.fromProtobufBytes(List<int> byteValues) {
    var pbSize = pb.Size.fromBuffer(byteValues);
    return Size.fromProto(pbSize);
  }

  factory Size.fromJson(Map<String, dynamic> json) {
    return new Size(
      json['inches'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    var map = new Map<String, dynamic>();
    map['inches'] = inches;
    return map;
  }

  @override
  String toString() {
    return json.encode(toJson());
  }
}

class Hat {
  Hat(
    this.inches,
    this.color,
    this.name,
  );

  int inches;
  String color;
  String name;

  pb.Hat toProto() {
    var pbHat = pb.Hat();
    pbHat.inches = inches;
    pbHat.color = color;
    pbHat.name = name;

    return pbHat;
  }

  factory Hat.fromProto(pb.Hat pbHat) {
    return new Hat(
      pbHat.inches,
      pbHat.color,
      pbHat.name,
    );
  }

  factory Hat.fromProtobufBytes(List<int> byteValues) {
    var pbHat = pb.Hat.fromBuffer(byteValues);
    return Hat.fromProto(pbHat);
  }

  factory Hat.fromJson(Map<String, dynamic> json) {
    return new Hat(
      json['inches'] as int,
      json['color'] as String,
      json['name'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    var map = new Map<String, dynamic>();
    map['inches'] = inches;
    map['color'] = color;
    map['name'] = name;
    return map;
  }

  @override
  String toString() {
    return json.encode(toJson());
  }
}

abstract class Haberdasher {
  Future<Hat> makeHat(Size size);
}

class ProtobufHaberdasher implements Haberdasher {
  final String hostname;
  Requester _requester;
  final _pathPrefix = "/twirp/kitanda.api.haberdasher.Haberdasher/";

  ProtobufHaberdasher(this.hostname, {Requester requester}) {
    if (requester == null) {
      _requester = new Requester(new Client());
    } else {
      _requester = requester;
    }
  }

  Future<Hat> makeHat(Size size) async {
    var url = "${hostname}${_pathPrefix}MakeHat";
    var uri = Uri.parse(url);
    var request = new Request('POST', uri);
    request.headers['Content-Type'] = 'application/protobuf';
    request.bodyBytes = size.toProto().writeToBuffer();
    var response = await _requester.send(request);
    if (response.statusCode != 200) {
      throw twirpException(response);
    }
    return Hat.fromProtobufBytes(response.bodyBytes);
  }

  Exception twirpException(Response response) {
    try {
      var value = json.decode(response.body);
      return new TwirpJsonException.fromJson(value);
    } catch (e) {
      return new TwirpException(response.body);
    }
  }
}

class DefaultHaberdasher implements Haberdasher {
  final String hostname;
  Requester _requester;
  final _pathPrefix = "/twirp/kitanda.api.haberdasher.Haberdasher/";

  DefaultHaberdasher(this.hostname, {Requester requester}) {
    if (requester == null) {
      _requester = new Requester(new Client());
    } else {
      _requester = requester;
    }
  }

  Future<Hat> makeHat(Size size) async {
    var url = "${hostname}${_pathPrefix}MakeHat";
    var uri = Uri.parse(url);
    var request = new Request('POST', uri);
    request.headers['Content-Type'] = 'application/json';
    request.body = json.encode(size.toJson());
    var response = await _requester.send(request);
    if (response.statusCode != 200) {
      throw twirpException(response);
    }
    var value = json.decode(response.body);
    return Hat.fromJson(value);
  }

  Exception twirpException(Response response) {
    try {
      var value = json.decode(response.body);
      return new TwirpJsonException.fromJson(value);
    } catch (e) {
      return new TwirpException(response.body);
    }
  }
}
